{"version":3,"file":"js.performance.umd.js","sources":["../src/engine/markerGenerator.js","../src/engine/index.js","../src/utilities/logger.js","../src/utilities/index.js","../src/index.js","../src/utilities/constants.js","../src/engine/marker.js"],"sourcesContent":["import { START, STOP } from '../utilities/constants'\nimport Marker from './marker'\n\nlet labels = {}\n\nif (process.env.NODE_ENV !== 'production') {\n  // performance =  internalPerformance\n}\n\nexport function internalStart (label) {\n  const startLabel = `${label}-${START}`\n  labels[label] = {\n    start: startLabel\n  }\n  performance.mark(startLabel)\n}\n\nexport function internalEnd (label) {\n  const stopLabel = `${label}-${STOP}`\n  labels[label]['stop'] = stopLabel\n  performance.mark(stopLabel)\n}\n\nexport function giveMeAllMarkers () {\n  for (const label in labels) {\n    const originalLabel = labels[label]\n    const startLabel = originalLabel.start\n    const stopLabel = originalLabel.stop\n    try {\n      performance.measure(label, startLabel, stopLabel)\n    } catch (e) {\n      throw new Error('JS Performance is trying access to marker that does not exist')\n    }\n  }\n  const measures = performance.getEntriesByType('measure')\n\n  const markers = []\n  for (let measure of measures) {\n    markers.push(new Marker({\n      name: measure.name,\n      duration: measure.duration\n    }))\n  }\n  return markers\n}\n\nexport function clearMarkers () {\n  labels = {}\n  performance.clearMarks()\n  performance.clearMeasures()\n}\n","import { internalStart, internalEnd, giveMeAllMarkers, clearMarkers } from './markerGenerator'\n\nexport let start = () => {}\nexport let stop = () => {}\n\nexport function recordingStart () {\n  clearMarkers()\n  start = internalStart\n  stop = internalEnd\n}\n\nexport function recordingStop () {\n  start = () => {}\n  stop = () => {}\n}\n\nexport function getMeasures () {\n  const markers = giveMeAllMarkers()\n  const table = markers.map(marker => ({ 'Operation name': marker.name, 'Duration (ms)': marker.duration }))\n  console.table(table)\n}\n\nexport function getMeasure (label) {\n  performance.getEntriesByName('', 'mark')\n}\n","const JS_PREFIX = '[JS-PERF]'\n\nexport function log (string) {\n  console.info(`${JS_PREFIX} string`)\n}\n","import { log } from './logger'\n\nexport function allowed () {\n  return typeof window !== 'undefined'\n}\n\nexport function precise () {\n  return typeof window.performance !== 'undefined'\n}\nexport function support () {\n  let result = ''\n  if (allowed()) {\n    if (precise()) {\n      result = 'Your browser support the User Timing API. The measures will be precise!'\n    } else {\n      result = 'Your browser does not support the User Timing API. The measures will not be precise'\n    }\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    return result\n  } else {\n    log(result)\n  }\n}\n","import { recordingStart, recordingStop, getMeasures, start, stop } from './engine'\nimport { support } from './utilities'\n\n/**\n *\n */\nexport function startRecording () {\n  recordingStart()\n}\n\n/**\n *\n */\nexport function stopRecording () {\n  recordingStop()\n}\n\nexport function allMeasures () {\n  return getMeasures()\n}\n\n/**\n * [mark description]\n * @param  {[type]} labelToMarkWith [description]\n * @return {[type]}                 [description]\n */\nexport function startMark (labelToMarkWith) {\n  start(labelToMarkWith)\n  if (process.env.NODE_ENV !== 'production') {\n    return labelToMarkWith\n  }\n}\n\n/**\n * [endMark description]\n * @param  {[type]} labelToMarkWith [description]\n * @return {[type]}                 [description]\n */\nexport function endMark (labelToMarkWith) {\n  stop(labelToMarkWith)\n  if (process.env.NODE_ENV !== 'production') {\n    return labelToMarkWith\n  }\n}\n\nexport function checkSupport () {\n  support()\n}\n","export const START = 'START'\nexport const STOP = 'STOP'\n","class Marker {\n  constructor ({ name, duration }) {\n    this.name = name\n    this.duration = duration\n  }\n\n  get info () {\n    return {\n      name: this.name,\n      duratino: this.duration\n    }\n  }\n\n  set info ({ name, duration }) {\n    this.name = name\n    this.duration = duration\n  }\n}\n\nexport default Marker\n"],"names":["internalStart","label","startLabel","START","mark","internalEnd","stopLabel","STOP","giveMeAllMarkers","labels","originalLabel","start","stop","measure","e","Error","markers","performance","getEntriesByType","push","Marker","name","duration","clearMarkers","clearMarks","clearMeasures","recordingStart","recordingStop","getMeasures","map","Operation name","marker","Duration (ms)","log","string","allowed","window","precise","support","result","startRecording","stopRecording","allMeasures","startMark","labelToMarkWith","endMark","checkSupport","this"],"mappings":"mMAKA,SAIgBA,EAAeC,OACvBC,EAAgBD,MAASE,IACxBF,UACEC,eAEGE,KAAKF,GAGnB,SAAgBG,EAAaJ,OACrBK,EAAeL,MAASM,IACvBN,GAAP,KAAwBK,cACZF,KAAKE,GAGnB,SAAgBE,QACT,IAAMP,KAASQ,EAAQ,KACpBC,EAAgBD,EAAOR,GACvBC,EAAaQ,EAAcC,MAC3BL,EAAYI,EAAcE,qBAElBC,QAAQZ,EAAOC,EAAYI,GACvC,MAAOQ,SACD,IAAIC,MAAM,0EAKdC,OAFWC,YAAYC,iBAAiB,+DAGhB,yFAArBL,MACCM,KAAK,IAAIC,QACTP,EAAQQ,cACJR,EAAQS,mBAGfN,EAGT,SAAgBO,qBAEFC,yBACAC,gBC5Cd,SAAgBC,UAEN1B,IACDK,EAGT,SAAgBsB,MACN,eACD,aAGT,SAAgBC,IACEpB,IACMqB,IAAI,mBAAaC,iBAAkBC,EAAOV,KAAMW,gBAAiBD,EAAOT,YChBzF,SAASW,EAAKC,ICAd,SAASC,UACW,oBAAXC,OAGhB,SAAgBC,gBACuB,IAAvBD,OAAOnB,YAEvB,SAAgBqB,QACVC,EAAS,GACTJ,QACEE,IACO,0EAEA,yFAMPE,GCfR,SAAgBC,QAOhB,SAAgBC,QAIhB,SAAgBC,WACPd,IAQT,SAAgBe,EAAWC,KACnBA,GAWR,SAAgBC,EAASD,KAClBA,GAMP,SAAgBE,QC7CT,IAAM3C,EAAQ,QACRI,EAAO,2VCDda,+BACWC,IAAAA,KAAMC,IAAAA,wBACdD,KAAOA,OACPC,SAAWA,qDAKRyB,KAAK1B,cACD0B,KAAKzB,+BAIPD,IAAAA,KAAMC,IAAAA,cACXD,KAAOA,OACPC,SAAWA,WNZhBb,KCDOE,EAAQ,aACRC,EAAO"}